pub const ARABIC_ALLOWED: [u32; 44] = [
    0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C,
    0x062D, 0x062E, 0x062F, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638,
    0x0639, 0x063A, 0x0641, 0x0642, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x064B, 0x064D, 0x0651,
    0x0670, 0x067E, 0x0686, 0x0698, 0x06A9, 0x06AF, 0x06C0, 0x06CC,
];

pub const OTHER_ALLOWED: [u32; 81] = [
    0x0020, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, 0x0030,
    0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003B, 0x003D, 0x003F,
    0x0041, 0x004E, 0x0050, 0x0051, 0x0053, 0x005A, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066,
    0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0070, 0x0071, 0x0072,
    0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0079, 0x007A, 0x00E1, 0x00EE, 0x00FC, 0x0101, 0x0113,
    0x0115, 0x012B, 0x014D, 0x016B, 0x02CC, 0x0324, 0x0331, 0x1E25, 0x1E35, 0x1E43, 0x1E47, 0x1E5B,
    0x1E63, 0x1E6D, 0x1E89, 0x1E93, 0x1E95, 0x1E96, 0x2014, 0x2018, 0x2019,
];

pub const DEFS_MISC: [u32; 70] = [
    0x0021, 0x0022, 0x003A, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A,
    0x004B, 0x004C, 0x004D, 0x004F, 0x0052, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005B,
    0x005C, 0x005D, 0x0078, 0x007C, 0x00A3, 0x00AF, 0x00B9, 0x00BC, 0x00BD, 0x00C6, 0x00C9, 0x00E0,
    0x00E2, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00ED, 0x00F1, 0x00F2, 0x00F4, 0x00F6, 0x0100,
    0x012A, 0x0153, 0x015B, 0x016A, 0x02D8, 0x0640, 0x064C, 0x064E, 0x064F, 0x0650, 0x0652, 0x0653,
    0x1E0D, 0x1E34, 0x1E45, 0x1E62, 0x1E94, 0x2080, 0x2082, 0x2085, 0x2089, 0x2251,
];

pub const DEFS_GREEK: [u32; 71] = [
    0x0392, 0x039C, 0x039D, 0x03A0, 0x03A3, 0x03A8, 0x03AC, 0x03AD, 0x03AE, 0x03AF, 0x03B1, 0x03B2,
    0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE,
    0x03BF, 0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CC,
    0x03CD, 0x03CE, 0x03DD, 0x1F00, 0x1F04, 0x1F05, 0x1F08, 0x1F10, 0x1F11, 0x1F14, 0x1F21, 0x1F30,
    0x1F31, 0x1F34, 0x1F36, 0x1F40, 0x1F44, 0x1F50, 0x1F51, 0x1F55, 0x1F60, 0x1F61, 0x1F64, 0x1F70,
    0x1F72, 0x1F74, 0x1F76, 0x1F78, 0x1F7A, 0x1F7C, 0x1FC6, 0x1FD6, 0x1FE4, 0x1FE5, 0x1FE6,
];

pub const DEFS_HEBREW: [u32; 20] = [
    0x05B0, 0x05B4, 0x05B7, 0x05B8, 0x05BC, 0x05D0, 0x05D4, 0x05D9, 0x05DA, 0x05DC, 0x05DE, 0x05DF,
    0x05E2, 0x05E7, 0x05E8, 0x05EA, 0xFB2A, 0xFB35, 0xFB44, 0xFB4B,
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn lists_sorted() {
        let mut arabic = ARABIC_ALLOWED;
        let mut other = OTHER_ALLOWED;
        let mut defs_misc = DEFS_MISC;
        let mut defs_greek = DEFS_GREEK;
        let mut defs_heb = DEFS_HEBREW;

        arabic.sort_unstable();
        other.sort_unstable();
        defs_misc.sort_unstable();
        defs_greek.sort_unstable();
        defs_heb.sort_unstable();

        assert_eq!(arabic, ARABIC_ALLOWED);
        assert_eq!(other, OTHER_ALLOWED);
        assert_eq!(defs_misc, DEFS_MISC);
        assert_eq!(defs_greek, DEFS_GREEK);
        assert_eq!(defs_heb, DEFS_HEBREW);
    }

    #[test]
    fn no_duplicates() {
        let total_length = ARABIC_ALLOWED.len()
            + OTHER_ALLOWED.len()
            + DEFS_MISC.len()
            + DEFS_GREEK.len()
            + DEFS_HEBREW.len();

        let mut all_chars = Vec::with_capacity(total_length);
        all_chars.extend_from_slice(&ARABIC_ALLOWED);
        all_chars.extend_from_slice(&OTHER_ALLOWED);
        all_chars.extend_from_slice(&DEFS_MISC);
        all_chars.extend_from_slice(&DEFS_GREEK);
        all_chars.extend_from_slice(&DEFS_HEBREW);

        all_chars.sort_unstable();
        all_chars.dedup();

        assert_eq!(all_chars.len(), total_length);
    }
}
